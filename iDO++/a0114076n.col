//@author: a0114076n



	/**
	 * origin: C:\Users\MadeRaditya\git\main3\iDO++\src\ido\main\CommandEdit.java
	 */

/*
* This class edits an existing task. 
* Based on user specification on what to modify, the method chooses which part of the 
* to-be-modified task string to keep and modifies the rest.
*/


public class CommandEdit {
	private String date;
	private int index;
	private String specification;
	private String modification;
	
	private final static Logger LOGGER = Logger.getLogger(CommandEdit.class .getName());
	
	private static final String TXT_EXTENSION = ".txt";
	private static final String CONTENT_TO_DISPLAY = "[%1$s] %2$s";
	private static final String UNKNOWN_TIME = "-";
	private static final String ALL_DAY_TIME = "by-today";
	private static final String FEEDBACK_INVALID_TIME  = "Invalid Time!";
	private static final String ERROR = "ERROR";
	private static final String SPEC_TIME = "time";
	private static final String SPEC_TASK = "task";
	private static final String SPEC_ALL = "all";
	private static final String ASK_FOR_SPEC = "Please enter what you would like to modify\ntask/time/all";
	public CommandEdit() {
	}
	
	//Mutators
	public void setDate(String str){
		date = str;
	}
	public void setIndex(String str) {
		index = Integer.parseInt(str);
	}
	public void setSpec(String str) {
		specification = str;
	}
	public void setMod(String str) {
		modification = str;
	}
	
	public void edit(String str1, String str2, String str3, String str4) throws IOException{
		LOGGER.setLevel(Level.INFO);
		
		setDate(str1); setIndex(str2); setSpec(str3); setMod(str4);
		
		String fileName = getDateStr(date);
		
		ArrayList<String> dateTask = new ArrayList<String>();
		dateTask = getFileContent(fileName);
		
		//get the task to be edited given the index of that task
		String oldTask = getTask(dateTask);
		dateTask.remove(oldTask);
		String editedTask = "";
		
		switch (specification) {
		case SPEC_TIME:
			try {
				editedTask = editTime(oldTask);
			} catch (Exception e) {
				editedTask = oldTask;
				WarningPopUp.infoBox(FEEDBACK_INVALID_TIME, ERROR);
				e.printStackTrace();
			}
			break;
		case SPEC_TASK:
			editedTask = editTask(oldTask);
			break;
		case SPEC_ALL:
			try {
				editedTask = editAll(oldTask);
			} catch (Exception e) {
				editedTask = oldTask;
				WarningPopUp.infoBox(FEEDBACK_INVALID_TIME, ERROR);
				e.printStackTrace();
			}
			break;
		default:
			WarningPopUp.infoBox(ASK_FOR_SPEC, ERROR);
		}
		dateTask.add(index-1, editedTask);
		(new FileAccessor(fileName, dateTask)).writeContents();
	}
	
	public String editTime(String oldTask) throws Exception {
		LOGGER.info("Edits the time of a specified task");
		
		//Split toBeRemoved string to 2parts and get the task (the unchanged part)
		String keep = oldTask.split(" ", 2)[1];
		
		setMod(getNewTimeStr(modification));
		return String.format(CONTENT_TO_DISPLAY, modification, keep);
	}
	
	public String editTask(String oldTask) {
		LOGGER.info("Edits the task content of a specified task");

		//Split toBeRemoved string to 2parts and get the time (the unchanged part)
		String keep = oldTask.split(" ", 2)[0];
		keep = keep.substring(1, keep.length()-1);
		return String.format(CONTENT_TO_DISPLAY, keep, modification);
	}
	
	public String editAll(String fileName) throws Exception{
		LOGGER.info("Edits the whole line of a specified task");
		
		String[] change = modification.split(" ", 2);
		change[0] = getNewTimeStr(change[0]);
		return String.format(CONTENT_TO_DISPLAY, change[0], change[1]);
	}
	
	//get the name of the file given the date input
			//date input can be 1-7, which is the box number is the date is being displayed
	private String getDateStr(String date){
		return IsValidDate.validateDate(date) + TXT_EXTENSION;
	}
	
	// Validates the time input. If input time is not specified, the time is assumed to be all-day
	private String getNewTimeStr(String time) throws Exception {
		String validatedTime = IsValidTime.validateTime(time);
		if (validatedTime.equals(UNKNOWN_TIME))
			validatedTime = ALL_DAY_TIME;
			return validatedTime;
	}
	
	private ArrayList<String> getFileContent(String fileName) {
		return (new FileAccessor(fileName)).readContents();
	}
	
	//Gets the task string given the index of the task
	private String getTask(ArrayList<String> dateTask) { 
		String task = dateTask.get(index -1);
		return task;
	}
}


	// End of segment: C:\Users\MadeRaditya\git\main3\iDO++\src\ido\main\CommandEdit.java





	/**
	 * origin: C:\Users\MadeRaditya\git\main3\iDO++\src\ido\main\CommandSearch.java
	 */

/*
* This class searches for certain input keywords. 
* Returns task strings that contains all the keywords.
*/

public class CommandSearch {
	private String[] keyword;
	
	private final static Logger LOGGER = Logger.getLogger(CommandSearch.class .getName());
	
	
	private static final String TEXT_EXTENSION = ".txt";

	private static final String SEARCH_RESULT = "%1$s %2$d. %3$s";
	private static final String NUM_RESULT = "Number of result(s): %1$d\n";
	private static final String LINE_FORMAT = "%1$s\n";
	private static final String NO_EXTENSION = "";
	private static final String EMPTY_RESULT = "Nothing found!";
	private static final String GENERAL_FILE = "general.txt";
	
	public CommandSearch() {
	}
	
	//Mutator
	public void setKeyword(String newKey) {
		keyword = newKey.toLowerCase().split(" ");
	}
	
	public String search(String key) {
		setKeyword(key);
		
		LOGGER.setLevel(Level.INFO);
		//The array to store the search result
		ArrayList<String> searchResult = new ArrayList<String>();
		String searchResultFinal = "";
		String fileName = "";
		String displayedFileName = ""; //displayedFileName is fileName without the .txt extension
		
		String currPath = getPath();
		File[] dirListing = getListFiles(currPath);
		
		if (dirListing != null) {
			for (File child : dirListing) {
		    	fileName = child.getName();
		    	displayedFileName = getDisplayedFileName(fileName);
		    	searchResult.addAll(searchFile(fileName, displayedFileName));
		    }
		}
		searchResultFinal = getResultString(searchResult);
		return searchResultFinal;
	}
	
	private String getDisplayedFileName(String fileName) {
		return fileName.replace(TEXT_EXTENSION, NO_EXTENSION);
	}
	
	private String getResultString(ArrayList<String> searchResult) {
		if (!searchResult.isEmpty()) {
			return arrayListToString(searchResult) + String.format(NUM_RESULT, searchResult.size());
		} else {
			return EMPTY_RESULT;
		}
	}
	
	private ArrayList<String> searchFile(String fileName, String displayedFileName) {
		String result = "";
		ArrayList<String> searchFileResult = new ArrayList<String>();
		//Only search for files whose name is the date or "general"
		if (isDateFile(fileName)||fileName.equals(GENERAL_FILE)) {
    		ArrayList<String> taskList = new ArrayList<String>();
    		taskList = (new FileAccessor(fileName)).readContents();
	    	for (int i=0; i<taskList.size(); i++) {
	    		if (isTaskContainKeys(taskList.get(i))) {
	    			result = String.format(SEARCH_RESULT, 
	    					displayedFileName, i+1, taskList.get(i));
	    			searchFileResult.add(result);
	    		}
			}
    	}
		return searchFileResult;
	}
	
	//Checks whether a task contains all the keywords
	private boolean isTaskContainKeys(String task) {
		for (int i=0; i<keyword.length; i++) {
			if (!task.toLowerCase().contains(keyword[i]))
				return false;
		}
		return true;
	}
	
	private String arrayListToString(ArrayList<String> arr) {
		String str = new String();
		for (int i=0; i<arr.size(); i++) {
			str = str + String.format(LINE_FORMAT, arr.get(i));
		}
		return str;
	}
	
	//Checks whether a certain text file name contains the date
	private boolean isDateFile(String fileName) {
		SimpleDateFormat sdf = new SimpleDateFormat("ddMMyy");
		try {
			sdf.parse(fileName);
			return true;
		} catch (ParseException e) {
			return false;
		}
	}
	
	//Gets the current working directory of the program
	private String getPath() {
		String currPath = "";
		try {
			currPath = new java.io.File( "." ).getCanonicalPath();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return currPath;
	}
	
	private File[] getListFiles(String currPath) {
		File dir = new File(currPath);
		File[] dirListing = dir.listFiles();
		return dirListing;
	}
}

	// End of segment: C:\Users\MadeRaditya\git\main3\iDO++\src\ido\main\CommandSearch.java





	/**
	 * origin: C:\Users\MadeRaditya\git\main3\iDO++\src\ido\main\DayModifier.java
	 */

/*
* This class takes in a date string and returns a reformatted display of the date.
* The string returned is used as the heading of each storage text file.
*/

public class DayModifier {
	private static final String OVERDUE_TASK = "overdue";
	private static final String GENERAL_TASK = "general";
	private static final String ARCHIVES_TASK = "archives";
	
	public static String getDayOfWeek(String currDateStr) {
		
		SimpleDateFormat sdf1 = new SimpleDateFormat("ddMMyy");
		SimpleDateFormat sdf2 = new SimpleDateFormat("EEEE");
		String dayOfWeekStr = "";
		
		if (currDateStr.equals(OVERDUE_TASK)||currDateStr.equals(GENERAL_TASK)||currDateStr.equals(ARCHIVES_TASK)) {
			// Displays starting Capital letter
			String firstChar = currDateStr.substring(0,1);
			String restChar = currDateStr.substring(1);
			currDateStr = firstChar.toUpperCase() + restChar;
			dayOfWeekStr = currDateStr;
		} else {
			try {
				dayOfWeekStr = sdf2.format(sdf1.parse(currDateStr));
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		return dayOfWeekStr;
	}

}

	// End of segment: C:\Users\MadeRaditya\git\main3\iDO++\src\ido\main\DayModifier.java





